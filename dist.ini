#name    = Shout
#author  = Jack Moffitt <jack@icecast.org>
#license = Perl_5
#copyright_holder = Jack Moffitt

[NameFromDirectory]

; Make the git repo installable
[Git::GatherDir]
exclude_filename = ['Makefile.PL', 'META.json', 'LICENSE', @exclude_release]
;[ 'CopyFilesFromBuild', { copy => [ 'META.json', 'LICENSE', $self->build_file ] } ],

; should be after GatherDir
; Equivalent to Module::Install's version_from, license_from and author_from
[VersionFromMainModule]
[LicenseFromModule]
override_author = 1

[ReversionOnRelease]
prompt = 1

; after ReversionOnRelease for munge_files, before Git::Commit for after_release
[NextRelease]
format = %v  %{yyyy-MM-dd HH:mm:ss VVV}d

[Git::Check]
allow_dirty = ['dist.ini', 'Changes', 'README.md', 'Makefile.PL']

[GithubMeta]
issues = 1

[ReadmeAnyFromPod]
type = markdown
filename = README.md
location = root

[MetaNoIndex]
directory = [ qw( t xt inc share eg examples ) ]

[Prereqs::FromCPANfile]

[MakeMaker::Awesome]
WriteMakefile_arg = CCFLAGS => `PKG_CONFIG_PATH=\${PKG_CONFIG_PATH:-/usr/local/lib/pkgconfig} pkg-config --cflags shout`
WriteMakefile_arg = LIBS => `PKG_CONFIG_PATH=\${PKG_CONFIG_PATH:-/usr/local/lib/pkgconfig} pkg-config --libs shout`
delimiter = |
footer = |if  (eval {require ExtUtils::Constant; 1}) {
footer = |  # If you edit these definitions to change the constants used by this module,
footer = |  # you will need to use the generated const-c.inc and const-xs.inc
footer = |  # files to replace their "fallback" counterparts before distributing your
footer = |  # changes.
footer = |  my @names = (qw(SHOUTERR_BUSY SHOUTERR_CONNECTED SHOUTERR_INSANE
footer = |       SHOUTERR_MALLOC SHOUTERR_METADATA SHOUTERR_NOCONNECT
footer = |       SHOUTERR_NOLOGIN SHOUTERR_SOCKET SHOUTERR_SUCCESS
footer = |       SHOUTERR_UNCONNECTED SHOUTERR_UNSUPPORTED SHOUT_FORMAT_MP3
footer = |       SHOUT_FORMAT_OGG SHOUT_FORMAT_VORBIS SHOUT_PROTOCOL_HTTP
footer = |       SHOUT_PROTOCOL_ICY SHOUT_PROTOCOL_XAUDIOCAST SHOUT_THREADSAFE));
footer = |  ExtUtils::Constant::WriteConstants(
footer = |                                     NAME         => 'Shout',
footer = |                                     NAMES        => \@names,
footer = |                                     DEFAULT_TYPE => 'IV',
footer = |                                     C_FILE       => 'const-c.inc',
footer = |                                     XS_FILE      => 'const-xs.inc',
footer = |                                  );
footer = |}
footer = |else {
footer = |  use File::Copy;
footer = |  use File::Spec;
footer = |  foreach my $file ('const-c.inc', 'const-xs.inc') {
footer = |    my $fallback = File::Spec->catfile('fallback', $file);
footer = |    copy ($fallback, $file) or die "Can't copy $fallback to $file: $!";
footer = |  }
footer = |}

[MetaJSON]
[Git::Contributors]

[PPPort]

[Prereqs]
-phase = develop
;'Dist::Milla' = Dist::Milla->VERSION

[PodSyntaxTests]
[MetaYAML]
[License]
;[ReadmeAnyFromPod]
[ReadmeAnyFromPod / ReadmeTextInBuild]
[ExtraTests]
[ExecDir]
dir = 'script'
[ShareDir]
[Manifest]
[ManifestSkip]

[CheckChangesHasContent]
[TestRelease]
[ConfirmRelease]

[FakeRelease]
;['UploadToCPAN']

[CopyFilesFromRelease]
match => '\.pm$'

[Git::Commit]
commit_msg = %v
allow_dirty = ['dist.ini', 'Changes', 'META.json', 'README.md', 'Makefile.PL']
allow_dirty_match = \.pm$

[Git::Tag]
tag_format = %v
tag_message = ''

[Git::Push]
remotes_must_exist = 0



;[GatherDir]
;[PruneCruft]
;[ManifestSkip]
;[MetaYAML]
;[License]
;[Readme]
;[ExtraTests]
;[ExecDir]
;[ShareDir]
;
;[MakeMaker::Awesome]
;WriteMakefile_arg = CCFLAGS => `PKG_CONFIG_PATH=\${PKG_CONFIG_PATH:-/usr/local/lib/pkgconfig} pkg-config --cflags shout`
;WriteMakefile_arg = LIBS => `PKG_CONFIG_PATH=\${PKG_CONFIG_PATH:-/usr/local/lib/pkgconfig} pkg-config --libs shout`
;[Manifest]
;
;[TestRelease]
;[ConfirmRelease]
;[UploadToCPAN]

